#Using KMeans

from sklearn import datasets
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split

iris = datasets.load_iris()
features = iris.data
targets = iris.target

X_train, X_test, y_train, y_test = train_test_split(features, targets, test_size=0.2, random_state=5)

# scaler = StandardScaler()
# X_train = scaler.fit_transform(X_train)
# X_test = scaler.fit_transform(X_test)

cluster = KMeans(n_clusters=3, random_state=5)
model = cluster.fit(X_train,y_train)
y_pred = cluster.predict(X_train)


import numpy as np
#Getting unique labels
 
u_labels = np.unique(y_pred)
 
#plotting the results:
 
for i in u_labels:
    plt.scatter(X_train[y_pred == i , 0] , X_train[y_pred == i , 1] , label = i)
plt.legend()
plt.show()


#Getting the Centroids
centroids = cluster.cluster_centers_
u_labels = np.unique(y_pred)
 
#plotting the results:
 
for i in u_labels:
    plt.scatter(X_train[y_pred == i , 0] , X_train[y_pred == i , 1] , label = i)
plt.scatter(centroids[:,0] , centroids[:,1] , s = 80, color = 'k')
plt.legend()
plt.show()


y_test_pred = cluster.predict(X_test)


from sklearn.metrics import accuracy_score

print("Accuracy of Trainning set: ",accuracy_score(y_train,y_pred)*100,"%")
print("Accuracy of Test set: ",accuracy_score(y_test, y_test_pred)*100,"%")


# Find Centroid of Clusters of given dataset

from sklearn.cluster import KMeans
import numpy as np
X = np.array([[1, 2], [1, 4], [1, 0],
              [10, 2], [10, 4], [10, 0]])
kmeans = KMeans(n_clusters=2, random_state=0).fit(X)
# kmeans.labels_

# kmeans.predict([[0, 0], [12, 3]])

kmeans.cluster_centers_
